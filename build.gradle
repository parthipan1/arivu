buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
    }
}
allprojects {
	group = 'org.arivu'
	version = '1.0.0'
}

subprojects {

	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'project-report'
	apply plugin: 'maven'
	apply plugin: 'maven-publish'
	apply plugin: 'com.jfrog.bintray'

	sourceCompatibility = 1.6
	targetCompatibility = 1.6
  
  eclipse{
  	classpath{
  		downloadSources=true
  		downloadJavadoc=true
  	}
  }
  
  compileJava {
    
    //enable compilation in a separate daemon process
    options.fork = true
  
    //enable incremental compilation
//    options.incremental = true
    
    // set debug Levels
    options.debugOptions.debugLevel = "source,lines,vars"
  }
  
  compileTestJava {
    
    //enable compilation in a separate daemon process
    options.fork = true
  
    //enable incremental compilation
//    options.incremental = true
    
    // set debug Levels
    options.debugOptions.debugLevel = "source,lines,vars"
  }

  repositories {
  	mavenCentral()
  	// https://dl.bintray.com/parthipan/arivu/
  }
  
  jar {
     archiveName project.group+'-'+project.name+'-'+project.version+'.jar'
	}

  dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
	compile fileTree(dir: 'libs', include: '*.jar')

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
  }

  task createPom() << {
	apply plugin: 'maven'
    //description "Generates pom.xml"
    
    pom {
        project {
            groupId project.group.toString()
            artifactId project.name
            version project.version.toString()
            packaging 'jar'
        }
    }.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')

        configurations.compile.allDependencies.each { dependency ->
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', dependency.group)
            dependencyNode.appendNode('artifactId', dependency.name)
            dependencyNode.appendNode('version', dependency.version)
        }
    }.writeTo("$buildDir/libs/"+project.group+"-"+project.name+"-"+project.version+".xml")
  }


  build.finalizedBy 'createPom'

  uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
  }
  
  bintray {
    user = 'parthipan'
    key = '940dda68c833b2c49f0f8a2467d25f07922c08c6'
    // configurations = ['deployables'] //When uploading configuration files
    // - OR -
    publications = ['MyPublication'] //When uploading Maven-based publication files
    // - AND/OR -
    /*
    filesSpec { //When uploading any arbitrary files ('filesSpec' is a standard Gradle CopySpec)
        from 'arbitrary-files'
        into 'standalone_files/level1'
        rename '(.+)\\.(.+)', '$1-suffix.$2'
    }
    */
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload    
    override = false //[Default: false] Whether to override version artifacts already published    
    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
    pkg {
        repo = 'arivu'
        name = 'org.arivu'
        //userOrg = 'arivu' //An optional organization name when the repo belongs to one of the user's orgs
        desc = 'Maven repo for arivu'
        websiteUrl = 'https://github.com/parthipan1/arivu'
        issueTrackerUrl = 'https://github.com/parthipan1/arivu/issues'
        vcsUrl = 'https://github.com/parthipan1/arivu.git'
        licenses = ['Apache-2.0']
        labels = ['arivu']
        publicDownloadNumbers = true
        //attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes

        githubRepo = 'parthipan1/arivu' //Optional Github repository
        githubReleaseNotesFile = 'README.md' //Optional Github readme file
		
		/*
        //Optional version descriptor
        version {
            name = '1.3-Final' //Bintray logical version name
            desc = //Optional - Version-specific description'
            released  = //Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
            vcsTag = '1.3.0'
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
            //Optional configuration for GPG signing
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
            }
            //Optional configuration for Maven Central sync of the version
            mavenCentralSync {
                sync = true //[Default: true] Determines whether to sync the version to Maven Central.
                user = 'userToken' //OSS user token: mandatory
                password = 'paasword' //OSS user password: mandatory
                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }            
        }
        */
    	}
	}
  
  
  publishing {
	    publications {
	        MyPublication(MavenPublication) {
	            from components.java
	            groupId project.group
	            artifactId project.name
	            version project.version
	        }
	    }
	}
  
   //project.group+'-'+project.name+'-'+project.version
  
 }

project(':ason'){
task copyJars() << {
}
}

project(':utils'){
task copyJars() << {
}
}

project(':datastructure'){
dependencies {
    compile project(':utils')
  }
  /*
task copyJars() << {
	copy{
		from "../../utils/utils/build/libs"
		into "libs"
		include '*.jar'
	}
}*/
}

project(':lightninglog'){
dependencies {
    compile project(':datastructure')
  }
  /*
task copyJars() << {
	copy{
		from "../../utils/utils/build/libs"
		into "libs"
		include '*.jar'
	}
	copy{
		from "../../datastructure/datastructure/build/libs"
		into "libs"
		include '*.jar'
	}
}
*/
}

project(':datasource'){
dependencies {
    compile project(':resourcepool')
    compile "org.apache.tomcat:tomcat-catalina:7.0.14"
    testCompile project(':lightninglog')
    runtime project(':lightninglog')
  }
  /*
task copyJars() << {
	copy{
		from "../../utils/utils/build/libs"
		into "libs"
		include '*.jar'
	}
	copy{
		from "../../datastructure/datastructure/build/libs"
		into "libs"
		include '*.jar'
	}
	copy{
		from "../../lightninglog/lightninglog/build/libs"
		into "libs"
		include '*.jar'
	}
	copy{
		from "../../resourcepool/resourcepool/build/libs"
		into "libs"
		include '*.jar'
	}
}
*/
}


project(':resourcepool'){
dependencies {
    compile project(':datastructure')
    testCompile project(':lightninglog')
    runtime project(':lightninglog')
  }
  /*
task copyJars() << {
	copy{
		from "../../utils/utils/build/libs"
		into "libs"
		include '*.jar'
	}
	copy{
		from "../../datastructure/datastructure/build/libs"
		into "libs"
		include '*.jar'
	}
	copy{
		from "../../lightninglog/lightninglog/build/libs"
		into "libs"
		include '*.jar'
	}
}
*/
}



project(':dmapper'){
dependencies {
    compile project(':resourcepool')
    runtime project(':datasource')
    runtime project(':lightninglog')
  }
  /*
task copyJars() << {
	copy{
		from "../../utils/utils/build/libs"
		into "libs"
		include '*.jar'
	}
	copy{
		from "../../datastructure/datastructure/build/libs"
		into "libs"
		include '*.jar'
	}
	copy{
		from "../../lightninglog/lightninglog/build/libs"
		into "libs"
		include '*.jar'
	}
}
*/
}

project(':nioserver'){
dependencies {
    runtime project(':lightninglog')
  }
  /*
task copyJars() << {
	copy{
		from "../../utils/utils/build/libs"
		into "libs"
		include '*.jar'
	}
	copy{
		from "../../datastructure/datastructure/build/libs"
		into "libs"
		include '*.jar'
	}
	copy{
		from "../../lightninglog/lightninglog/build/libs"
		into "libs"
		include '*.jar'
	}
}
*/
}